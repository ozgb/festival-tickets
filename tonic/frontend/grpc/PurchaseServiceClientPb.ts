/**
 * @fileoverview gRPC-Web generated client stub for purchase
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: purchase.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as purchase_pb from './purchase_pb'; // proto import: "purchase.proto"


export class ProductServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetTicketTypes = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/GetTicketTypes',
    grpcWeb.MethodType.UNARY,
    purchase_pb.GetTicketTypesRequest,
    purchase_pb.GetTicketTypesResponse,
    (request: purchase_pb.GetTicketTypesRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.GetTicketTypesResponse.deserializeBinary
  );

  getTicketTypes(
    request: purchase_pb.GetTicketTypesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<purchase_pb.GetTicketTypesResponse>;

  getTicketTypes(
    request: purchase_pb.GetTicketTypesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: purchase_pb.GetTicketTypesResponse) => void): grpcWeb.ClientReadableStream<purchase_pb.GetTicketTypesResponse>;

  getTicketTypes(
    request: purchase_pb.GetTicketTypesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: purchase_pb.GetTicketTypesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/purchase.ProductService/GetTicketTypes',
        request,
        metadata || {},
        this.methodDescriptorGetTicketTypes,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/purchase.ProductService/GetTicketTypes',
    request,
    metadata || {},
    this.methodDescriptorGetTicketTypes);
  }

  methodDescriptorGetTicketDurations = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/GetTicketDurations',
    grpcWeb.MethodType.UNARY,
    purchase_pb.GetTicketDurationsRequest,
    purchase_pb.GetTicketDurationsResponse,
    (request: purchase_pb.GetTicketDurationsRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.GetTicketDurationsResponse.deserializeBinary
  );

  getTicketDurations(
    request: purchase_pb.GetTicketDurationsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<purchase_pb.GetTicketDurationsResponse>;

  getTicketDurations(
    request: purchase_pb.GetTicketDurationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: purchase_pb.GetTicketDurationsResponse) => void): grpcWeb.ClientReadableStream<purchase_pb.GetTicketDurationsResponse>;

  getTicketDurations(
    request: purchase_pb.GetTicketDurationsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: purchase_pb.GetTicketDurationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/purchase.ProductService/GetTicketDurations',
        request,
        metadata || {},
        this.methodDescriptorGetTicketDurations,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/purchase.ProductService/GetTicketDurations',
    request,
    metadata || {},
    this.methodDescriptorGetTicketDurations);
  }

  methodDescriptorAddTicketToBasket = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/AddTicketToBasket',
    grpcWeb.MethodType.UNARY,
    purchase_pb.AddTicketToBasketRequest,
    purchase_pb.AddTicketToBasketResponse,
    (request: purchase_pb.AddTicketToBasketRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.AddTicketToBasketResponse.deserializeBinary
  );

  addTicketToBasket(
    request: purchase_pb.AddTicketToBasketRequest,
    metadata?: grpcWeb.Metadata | null): Promise<purchase_pb.AddTicketToBasketResponse>;

  addTicketToBasket(
    request: purchase_pb.AddTicketToBasketRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: purchase_pb.AddTicketToBasketResponse) => void): grpcWeb.ClientReadableStream<purchase_pb.AddTicketToBasketResponse>;

  addTicketToBasket(
    request: purchase_pb.AddTicketToBasketRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: purchase_pb.AddTicketToBasketResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/purchase.ProductService/AddTicketToBasket',
        request,
        metadata || {},
        this.methodDescriptorAddTicketToBasket,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/purchase.ProductService/AddTicketToBasket',
    request,
    metadata || {},
    this.methodDescriptorAddTicketToBasket);
  }

  methodDescriptorPurchaseOrder = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/PurchaseOrder',
    grpcWeb.MethodType.UNARY,
    purchase_pb.PurchaseOrderRequest,
    purchase_pb.PurchaseOrderResponse,
    (request: purchase_pb.PurchaseOrderRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.PurchaseOrderResponse.deserializeBinary
  );

  purchaseOrder(
    request: purchase_pb.PurchaseOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<purchase_pb.PurchaseOrderResponse>;

  purchaseOrder(
    request: purchase_pb.PurchaseOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: purchase_pb.PurchaseOrderResponse) => void): grpcWeb.ClientReadableStream<purchase_pb.PurchaseOrderResponse>;

  purchaseOrder(
    request: purchase_pb.PurchaseOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: purchase_pb.PurchaseOrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/purchase.ProductService/PurchaseOrder',
        request,
        metadata || {},
        this.methodDescriptorPurchaseOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/purchase.ProductService/PurchaseOrder',
    request,
    metadata || {},
    this.methodDescriptorPurchaseOrder);
  }

  methodDescriptorGetOrder = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/GetOrder',
    grpcWeb.MethodType.UNARY,
    purchase_pb.GetOrderRequest,
    purchase_pb.GetOrderResponse,
    (request: purchase_pb.GetOrderRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.GetOrderResponse.deserializeBinary
  );

  getOrder(
    request: purchase_pb.GetOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<purchase_pb.GetOrderResponse>;

  getOrder(
    request: purchase_pb.GetOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: purchase_pb.GetOrderResponse) => void): grpcWeb.ClientReadableStream<purchase_pb.GetOrderResponse>;

  getOrder(
    request: purchase_pb.GetOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: purchase_pb.GetOrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/purchase.ProductService/GetOrder',
        request,
        metadata || {},
        this.methodDescriptorGetOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/purchase.ProductService/GetOrder',
    request,
    metadata || {},
    this.methodDescriptorGetOrder);
  }

  methodDescriptorGetOrderStats = new grpcWeb.MethodDescriptor(
    '/purchase.ProductService/GetOrderStats',
    grpcWeb.MethodType.SERVER_STREAMING,
    purchase_pb.GetOrderStatsRequest,
    purchase_pb.OrderStats,
    (request: purchase_pb.GetOrderStatsRequest) => {
      return request.serializeBinary();
    },
    purchase_pb.OrderStats.deserializeBinary
  );

  getOrderStats(
    request: purchase_pb.GetOrderStatsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<purchase_pb.OrderStats> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/purchase.ProductService/GetOrderStats',
      request,
      metadata || {},
      this.methodDescriptorGetOrderStats);
  }

}

